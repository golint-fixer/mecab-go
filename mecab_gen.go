// generated by mg; DO NOT EDIT

package mecab

// #cgo CFLAGS: -I/usr/local/Cellar/mecab/0.996/include
// #cgo LDFLAGS: -L/usr/local/Cellar/mecab/0.996/lib -lmecab -lstdc++
// #include <mecab.h>
// #include <stdio.h>
import "C"

import (
	"strings"
)

var args Args

// Initialize initalize Mecab Args
func Initialize(a Args) {
	args = a
}

// Parse returns MeCab parse result.
func Parse(sentence string) ([]ParseResult, error) {
	result := []ParseResult{}

	model := C.mecab_model_new2(C.CString(args.Build()))
	if model == nil {
		return result, newMecabError("mecab model is not created.")
	}
	tagger := C.mecab_model_new_tagger(model)
	if tagger == nil {
		return result, newMecabError("mecab tagger is not created.")
	}
	lattice := C.mecab_model_new_lattice(model)
	if lattice == nil {
		return result, newMecabError("mecab lattice is not created.")
	}

	defer func() {
		C.mecab_destroy(tagger)
		C.mecab_lattice_destroy(lattice)
		C.mecab_model_destroy(model)
	}()

	C.mecab_lattice_set_sentence(lattice, C.CString(sentence))
	C.mecab_parse_lattice(tagger, lattice)

	lines := strings.Split(C.GoString(C.mecab_lattice_tostr(lattice)), "\n")
	for _, l := range lines {
		if strings.Index(l, "EOS") != 0 {
			if len(l) > 1 {
				result = append(result, split(l))
			}
		}
	}

	return result, nil
}

func split(line string) ParseResult {
	r := ParseResult{}

	// 表層形\t形態素
	l := strings.Split(line, "\t")
	r.Surface = l[0]
	r.Feature = l[1]

	// 品詞,品詞細分類1,品詞細分類2,品詞細分類3,活用形,活用型,原形,読み,発音
	feature := strings.Split(r.Feature, ",")
	r.Pos = feature[0]
	r.Pos1 = feature[1]
	r.Pos2 = feature[2]
	r.Pos3 = feature[3]
	r.Cform = feature[4]
	r.Ctype = feature[5]
	r.Base = feature[6]
	if len(feature) > 7 {
		r.Read = feature[7]
		r.Pron = feature[8]
	}

	return r
}
