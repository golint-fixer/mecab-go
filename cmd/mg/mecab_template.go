package main

import (
	"bytes"
	"text/template"
)

const mecabTemplateStr = `// generated by mg; DO NOT EDIT

package mecab

// #cgo CFLAGS: {{.CFlags}}
// #cgo LDFLAGS: {{.LDFlags}}
// #include <mecab.h>
// #include <stdio.h>
import "C"

import (
	"strings"
)

var args Args

// Initialize initalize Mecab Args
func Initialize(a Args) {
	args = a
}

// Parse returns MeCab parse result.
func Parse(sentence string) ([]Node, error) {
	nodes := []Node{}

	model := C.mecab_model_new2(C.CString(args.Build()))
	if model == nil {
		return nodes, newMecabError("mecab model is not created.")
	}
	tagger := C.mecab_model_new_tagger(model)
	if tagger == nil {
		return nodes, newMecabError("mecab tagger is not created.")
	}
	lattice := C.mecab_model_new_lattice(model)
	if lattice == nil {
		return nodes, newMecabError("mecab lattice is not created.")
	}

	defer func() {
		C.mecab_destroy(tagger)
		C.mecab_lattice_destroy(lattice)
		C.mecab_model_destroy(model)
	}()

	C.mecab_lattice_set_sentence(lattice, C.CString(sentence))
	C.mecab_parse_lattice(tagger, lattice)

	lines := strings.Split(C.GoString(C.mecab_lattice_tostr(lattice)), "\n")
	for _, line := range lines {
		if strings.Index(line, "EOS") != 0 && len(line) > 1 {
			nodes = append(nodes, NewNode(line))
		}
	}

	return nodes, nil
}
`

type MecabTemplate struct{}

func (mt MecabTemplate) Parse(config MecabConfig) (*bytes.Buffer, error) {
	var buf bytes.Buffer
	t := template.Must(template.New("mecab").Parse(mecabTemplateStr))
	if err := t.Execute(&buf, config); err != nil {
		return nil, err
	}

	return &buf, nil
}
